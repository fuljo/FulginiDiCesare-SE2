@startuml dd_sequence_diagram_uc_2_3
skinparam Shadowing false

actor Authority as A
participant ":AuthorityWebApp" as AWA
participant ":WebServer" as WS
participant ":Router" as R
participant ":SuggestionsManager" as SM
participant ":DBMS" as DBMS

A -> AWA : requestSuggestionsPage()
activate AWA
AWA -> WS : get("/suggestions")
activate WS
WS --> AWA : webPage
deactivate WS
AWA -> R : requestSuggestionsList()
activate R
R -> SM : getSuggestionsList()
deactivate R
activate SM
SM -> SM : authority =\ndetermineAuthority(req.token)
note right
    The SuggestionsManager identifies
    the Authority from it's session
    token, so that it can apply
    the required filters to show
    it only their suggestions
end note
SM -> DBMS : selectSuggestions(authority)
activate DBMS
DBMS --> SM : queryResults
deactivate DBMS
alt There are no Suggestions to be shown
SM --> AWA : noSuggestionsAvailable
AWA --> A : noSuggestionsAvailable
else There are Suggestions to be shown
SM --> AWA : suggestionsList
deactivate SM
AWA --> A : suggestionsList
A -> AWA : requestDetails(sug)
AWA -> R : requestSuggestionDetails(sug.id)
activate R
R -> SM : getSuggestionDetails(id)
deactivate R
activate SM
SM -> DBMS : selectSuggestion(id)
activate DBMS
DBMS --> SM : queryResults
deactivate DBMS
SM --> AWA : suggestionDetails
deactivate SM
AWA --> A : detailsCard
opt Authority carries out the suggestion
A -> AWA : markAsCarriedOut(sug)
AWA -> R : markSuggestionAsCarriedOut(sug.id)
activate R
R -> SM : setSuggestionStatus\n(id,CARRIED_OUT)
deactivate R
activate SM
SM -> DBMS : updateSuggestion(id,status)
activate DBMS
DBMS --> SM : success
deactivate DBMS
SM --> AWA : success
deactivate SM
AWA --> A : success
deactivate AWA
end
end

@enduml